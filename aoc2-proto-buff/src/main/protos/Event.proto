import "Info.proto";

package com.lvl6.aoc2.proto;

option java_outer_classname = "EventProto";

//-----------------------------------------------------------------------------

message StartupRequestProto {
	optional string udid = 1;
	optional float versionNum = 2;
}

message StartupResponseProto {
	optional FullUserProto sender = 1;
	optional StartupStatus startupStatus = 2;
	optional UpdateStatus updateStauts = 3;

	enum UpdateStatus {
		NO_UPDATE = 0;
		MINOR_UPDATE = 1;
		MAJOR_UPDATE = 2;
	}

	enum StartupStatus {
		USER_IN_DB = 0;
		USER_NOT_IN_DB = 1;
	}
}

//-----------------------------------------------------------------------------

message UserCreateRequestProto {
     optional string udid = 1;
     optional string name = 2;
     optional PlayerClass playerClass = 3;
     //optional LocationProto userLocation = 6;     
     optional string referrerCode = 7;
     optional string deviceToken = 8;
}

message UserCreateResponseProto {
	optional FullUserProto sender = 1;
	optional UserCreateStatus status = 2;
	
    enum UserCreateStatus {
		SUCCESS = 0;
		INVALID_NAME = 1;
		INVALID_LOCATION = 2;
		USER_WITH_UDID_ALREADY_EXISTS = 3;
     	TIME_ISSUE = 4;
     	INVALID_SKILL_POINT_ALLOCATION = 5;
     	INVALID_REFER_CODE = 6;
		OTHER_FAIL = 7;
	}  
}

//-----------------------------------------------------------------------------

message PurchaseNormStructureRequestProto {
	optional MinimumUserProto sender = 1;
	optional CoordinateProto structCoordinates = 2;
	optional StructType type = 3;
	optional int64 timeOfPurchase = 4;
}

message PurchaseNormStructureResponseProto {
	optional MinimumUserProto sender = 1;
	optional PurchaseNormStructureStatus status = 2;
	optional int32 userStructId = 3;
	
	enum PurchaseNormStructureStatus {
		SUCCESS = 0;
		NOT_ENOUGH_MATERIALS = 1;
		LEVEL_TOO_LOW = 2;
		ANOTHER_STRUCT_STILL_BUILDING = 3;
		ALREADY_HAVE_MAX_OF_THIS_STRUCT = 4;
		OTHER_FAIL = 5;
		CLIENT_TOO_APART_FROM_SERVER_TIME = 6;
	}
}

//-----------------------------------------------------------------------------

message MoveOrRotateNormStructureRequestProto {
	optional MinimumUserProto sender = 1;
	optional int32 userStructId = 2;
	optional CoordinateProto newStructCoordinates = 4;
	
}

message MoveOrRotateNormStructureResponseProto {
	optional MinimumUserProto sender = 1;
	optional MoveOrRotateNormStructureStatus status = 2;
	
	enum MoveOrRotateNormStructureStatus {
		SUCCESS = 0;
		OTHER_FAIL = 2;
	}
}

//-----------------------------------------------------------------------------

message UpgradeNormStructureRequestProto {
	optional MinimumUserProto sender = 1;
	optional int32 userStructId = 2;
	optional int64 timeOfUpgrade = 3;	
}

message UpgradeNormStructureResponseProto {
	optional MinimumUserProto sender = 1;
	optional UpgradeNormStructureStatus status = 2;
	
	enum UpgradeNormStructureStatus {
		SUCCESS = 0;
		NOT_ENOUGH_MATERIALS = 1;
		NOT_BUILT_YET = 2;
		NOT_USERS_STRUCT = 3;
		ANOTHER_STRUCT_STILL_UPGRADING = 4;
		OTHER_FAIL = 5;
		CLIENT_TOO_APART_FROM_SERVER_TIME = 6;
		AT_MAX_LEVEL_ALREADY = 7;
	}
}

//-----------------------------------------------------------------------------

message RetrieveCurrencyFromNormStructureRequestProto {
	optional MinimumUserProto sender = 1;
	repeated StructRetrieval structRetrievals = 2;
	
	message StructRetrieval {
		optional int32 userStructId = 1;
		optional int64 timeOfRetrieval = 2;
	}
}

message RetrieveCurrencyFromNormStructureResponseProto {
	optional MinimumUserProto sender = 1;
	optional RetrieveCurrencyFromNormStructureStatus status = 2;
	
	enum RetrieveCurrencyFromNormStructureStatus {
		OTHER_FAIL = 1;
		SUCCESS = 2;
		CLIENT_TOO_APART_FROM_SERVER_TIME = 3;
		NOT_LONG_ENOUGH = 4;
	}
}

//------------------------------------------------------------------------------------------

message FinishNormStructWaittimeWithDiamondsRequestProto {
	optional MinimumUserProto sender = 1;
	optional int32 userStructId = 2;
	optional int64 timeOfSpeedup = 3;			//lastRetrieved will start with this date
	optional NormStructWaitTimeType waitTimeType = 4;

	enum NormStructWaitTimeType {
		FINISH_CONSTRUCTION = 0;
		FINISH_INCOME_WAITTIME = 1;
		FINISH_UPGRADE = 2;
	}
}

message FinishNormStructWaittimeWithDiamondsResponseProto {
     optional MinimumUserProto sender = 1;
     optional FinishNormStructWaittimeStatus status = 2;
     
     enum FinishNormStructWaittimeStatus {
     	SUCCESS = 0;
     	NOT_ENOUGH_DIAMONDS = 1;
     	OTHER_FAIL = 2;
     	CLIENT_TOO_APART_FROM_SERVER_TIME = 3;
     }
}

//------------------------------------------------------------------------------------------

//this message sent to server after a player's homepage is loaded and client checks which structs 
//have been built but not reflected in db yet (so when is_complete=0 but the purchase_time 
//implies that it should be)
//this message is also sent whenever the player is on the screen and the build completes
//i would set last_retrieved manually to when it should have completed, and is_complete=1

//NOT VERY EFFICIENT..extra db call. and for every newly built building, new db call. but w/e for now.																						
message NormStructWaitCompleteRequestProto {
	optional MinimumUserProto sender = 1;
	repeated int32 userStructId = 2;
	optional int64 curTime = 3;						//used for checking
}

message NormStructWaitCompleteResponseProto {
     optional MinimumUserProto sender = 1;
     optional NormStructWaitCompleteStatus status = 2;
     repeated FullUserStructProto userStruct = 3;
     
     enum NormStructWaitCompleteStatus {
     	SUCCESS = 0;
     	NOT_DONE_YET = 1;
     	OTHER_FAIL = 2;
     	CLIENT_TOO_APART_FROM_SERVER_TIME = 3;
     }
}

//------------------------------------------------------------------------------------------

message LoadPlayerCityRequestProto {
	optional MinimumUserProto sender = 1;
	optional int32 cityOwnerId = 2;
}

message LoadPlayerCityResponseProto {
    optional MinimumUserProto sender = 1;
    optional MinimumUserProto cityOwner = 2;
	optional LoadPlayerCityStatus status = 3;
	repeated FullUserStructProto ownerNormStructs = 4;
     
    enum LoadPlayerCityStatus {
     	SUCCESS = 0;
     	NO_SUCH_PLAYER = 1;
     	OTHER_FAIL = 2;
     }
}